{"version":3,"sources":["store/reducers/Feedback/feedback.slice.ts","store/reducers/Loader/loader.slice.ts","store/reducers/HealthStatus/healthStatus.slice.ts","store/store.ts","components/LoadingModal/LoadingModalStyled.tsx","components/LoadingModal/LoadingModal.tsx","components/AppRouter/RoutesLiterals.tsx","api/internalApi.ts","services/healthStatus.service.ts","store/reducers/HealthStatus/Actions/getStatus.ts","store/reducers/HealthStatus/Actions/getAllStatus.ts","store/Utils/storeHooks.ts","views/HealthStatus/HealthStatus.Styles.tsx","views/HealthStatus/TableWrapper.Styles.tsx","views/HealthStatus/HealthStatus.tsx","views/HealthStatus/Hooks/useHealthStatusColumn.hook.tsx","views/HealthStatus/Hooks/useInterval.hook.tsx","config/INTERVAL_SECONDS.tsx","components/AppRouter/AppRouter.tsx","components/Alert/Alert.tsx","components/Feedback/Feedback.Styles.ts","components/Feedback/Feedback.tsx","components/ErrorBoundary.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["initialState","feedbackSlice","createSlice","name","reducers","setSuccessMessage","state","action","message","payload","messageType","setErrorMessage","reset","actions","isOpen","loaderSlice","openLoadingModal","closeLoadingModal","initialStatus","success","hostname","time","version","accounts","assets","customers","datapoints","devices","documents","forms","invites","media","messages","namespaces","orders","patients","relationships","rules","templates","users","workflows","healthStatusSlice","addStatus","APIName","status","rootReducer","feedback","loader","healthStatus","store","configureStore","reducer","LoadingModalStyled","styled","Spin","LoadingOutlinedStyled","LoadingOutlined","LoadingModal","useSelector","indicator","spin","RoutesLiterals","route","cookies","Cookies","instance","axios","create","baseURL","process","headers","interceptors","request","use","config","newConfig","token","get","Authorization","navigator","userAgent","indexOf","method","params","timestamp","Date","getTime","healthStatusService","internalApi","getStatus","dispatch","getState","a","response","data","APINames","getAllStatus","forEach","useAppSelector","HealthStatusStyled","div","TableWrapperStyled","HealthStatus","useDispatch","columns","useState","setColumns","useEffect","key","dataIndex","align","title","render","value","toLocaleString","useHealthStatusColumn","healthStatusValues","setHealthStatusValues","newValues","Object","values","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","Number","bordered","dataSource","pagination","showSorterTooltip","onRow","className","AppRouter","exact","path","to","Alert","props","showIcon","closable","notificationStyle","padding","overflow","width","messageListStyle","margin","paddingLeft","Feedback","handleClose","useCallback","resetFeedbackStore","notification","open","description","type","Array","style","map","error","toUpperCase","onClose","placement","closeIcon","ErrorBoundary","hasError","errorInfo","console","log","this","setState","children","Component","App","Boolean","window","location","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.caf2e3b0.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface IFeedbackState {\n  message?: string | string[];\n  messageType?: \"error\" | \"success\";\n}\n\nexport const initialState: IFeedbackState = {};\n\nconst feedbackSlice = createSlice({\n  name: \"feedback\",\n  initialState,\n  reducers: {\n    setSuccessMessage: (state, action: PayloadAction<string>) => {\n      state.message = action.payload;\n      state.messageType = \"success\";\n    },\n    setErrorMessage: (state, action: PayloadAction<string | string[]>) => {\n      state.message = action.payload;\n      state.messageType = \"error\";\n    },\n    reset: () => initialState,\n  },\n});\n\nexport const {\n  setErrorMessage,\n  setSuccessMessage,\n  reset,\n} = feedbackSlice.actions;\n\nexport default feedbackSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\ntype IState = {\n  isOpen: boolean;\n};\n\nexport const initialState: IState = {\n  isOpen: false,\n};\n\nconst loaderSlice = createSlice({\n  name: \"loader\",\n  initialState,\n  reducers: {\n    openLoadingModal: (state) => {\n      state.isOpen = true;\n    },\n    closeLoadingModal: (state) => {\n      state.isOpen = false;\n    },\n    reset: () => initialState,\n  },\n});\n\nexport const { closeLoadingModal, openLoadingModal } = loaderSlice.actions;\n\nexport default loaderSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TAPIName } from \"./Actions/getAllStatus\";\n\nexport interface IStatus {\n  success: boolean;\n  message: string;\n  hostname: string;\n  time: number;\n  version: string;\n}\n\nconst initialStatus: IStatus = {\n  success: false,\n  message: \"UNKOWN\",\n  hostname: \"UNKOWN\",\n  time: 0,\n  version: \"UNKOWN\",\n};\n\nexport type THealthStatusValue = IStatus;\n\ntype IState = Record<TAPIName, THealthStatusValue>;\n\nexport const initialState: IState = {\n  accounts: initialStatus,\n  assets: initialStatus,\n  customers: initialStatus,\n  datapoints: initialStatus,\n  devices: initialStatus,\n  documents: initialStatus,\n  forms: initialStatus,\n  invites: initialStatus,\n  media: initialStatus,\n  messages: initialStatus,\n  namespaces: initialStatus,\n  orders: initialStatus,\n  patients: initialStatus,\n  relationships: initialStatus,\n  rules: initialStatus,\n  templates: initialStatus,\n  users: initialStatus,\n  workflows: initialStatus,\n};\n\nconst sliceName = \"healthStatus\";\n\nconst healthStatusSlice = createSlice({\n  name: sliceName,\n  initialState,\n  reducers: {\n    addStatus: (\n      state,\n      action: PayloadAction<{ APIName: TAPIName; status: IStatus }>\n    ) => {\n      state[action.payload.APIName] = action.payload.status;\n    },\n    reset: () => initialState,\n  },\n});\n\nexport const { addStatus } = healthStatusSlice.actions;\n\nexport default healthStatusSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport feedback from \"./reducers/Feedback/feedback.slice\";\nimport loader from \"./reducers/Loader/loader.slice\";\nimport healthStatus from \"./reducers/HealthStatus/healthStatus.slice\";\n\nconst rootReducer = {\n  feedback,\n  loader,\n  healthStatus,\n};\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport type TAppState = ReturnType<typeof store.getState>;\n\nexport type TAppDispatch = typeof store.dispatch;\n\nexport default store;\n","import styled from \"styled-components\";\nimport { Spin } from \"antd\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\n\nexport const LoadingModalStyled = styled(Spin)`\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  z-index: 2000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  animation: loading-modal-background 0.25s ease-in forwards;\n\n  @keyframes loading-modal-background {\n    0% {\n      background: transparent;\n    }\n    100% {\n      background: rgba(0, 0, 0, 0.5);\n    }\n  }\n`;\n\nexport const LoadingOutlinedStyled = styled(LoadingOutlined)`\n  font-size: 44px;\n`;\n","import React, { FC } from \"react\";\n\nimport { useSelector } from \"react-redux\";\nimport { TAppState } from \"store/store\";\n\nimport {\n  LoadingModalStyled,\n  LoadingOutlinedStyled,\n} from \"./LoadingModalStyled\";\n\nconst LoadingModal: FC = () => {\n  const { isOpen } = useSelector((state: TAppState) => state.loader);\n\n  return isOpen ? (\n    <LoadingModalStyled indicator={<LoadingOutlinedStyled spin />} />\n  ) : (\n    <></>\n  );\n};\n\nexport default LoadingModal;\n","interface IRouteLiteral {\n  name: string;\n  route: string;\n}\n\ntype TSection = \"healthStatus\";\n\ntype TRoutesLiterals = Record<TSection, IRouteLiteral>;\n\nconst RoutesLiterals: TRoutesLiterals = {\n  healthStatus: {\n    name: \"Health Status\",\n    route: \"/healthStatus\",\n  },\n};\n\nexport default RoutesLiterals;\n","import axios from \"axios\";\nimport Cookies from \"universal-cookie\";\n\nconst defaultOptions = {\n  baseURL: process.env.REACT_APP_BASE_API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n};\n\nexport const cookies = new Cookies();\n\nconst instance = axios.create(defaultOptions);\n\ninstance.interceptors.request.use((config) => {\n  const newConfig = { ...config };\n\n  const token = cookies.get(\"token\");\n\n  newConfig.headers.Authorization = token ? `bearer ${token}` : \"\";\n\n  // this is a hack to bypass caching issue on ie11\n  if (\n    navigator.userAgent.indexOf(\"Trident/\") > -1 &&\n    newConfig.method === \"get\"\n  ) {\n    newConfig.params = { timestamp: new Date().getTime() };\n  }\n  return newConfig;\n});\n\nexport default instance;\n","import { AxiosResponse } from \"axios\";\n\nimport { TAPIName } from \"store/reducers/HealthStatus/Actions/getAllStatus\";\nimport { IStatus } from \"store/reducers/HealthStatus/healthStatus.slice\";\n\nimport internalApi from \"../api/internalApi\";\n\ntype THealthStatusService = (\n  APIName: TAPIName\n) => Promise<AxiosResponse<IStatus>>;\n\nexport const healthStatusService: THealthStatusService = (APIName) =>\n  internalApi.get(`${APIName}/health/status`);\n","import { AxiosResponse } from \"axios\";\n\nimport { TThunk } from \"store/interfaces/TThunk\";\n\nimport { healthStatusService } from \"services/healthStatus.service\";\nimport {\n  closeLoadingModal,\n  openLoadingModal,\n} from \"store/reducers/Loader/loader.slice\";\nimport { addStatus, IStatus } from \"../healthStatus.slice\";\nimport { TAPIName } from \"./getAllStatus\";\n\ntype TGetStatus = (APIName: TAPIName) => TThunk<void>;\n\nconst getStatus: TGetStatus = (APIName) => async (dispatch, getState) => {\n  const state = getState();\n\n  const {\n    loader: { isOpen },\n  } = state;\n\n  if (!isOpen) {\n    dispatch(openLoadingModal());\n  }\n\n  try {\n    const response: AxiosResponse<IStatus> = await healthStatusService(APIName);\n\n    dispatch(addStatus({ APIName, status: response.data }));\n  } catch (error) {\n    dispatch(\n      addStatus({\n        APIName,\n        status: {\n          success: false,\n          message: \"NETWORK ERROR\",\n          hostname: \"UNKNOWN\",\n          time: 0,\n          version: \"UNKNOWN\",\n        },\n      })\n    );\n  } finally {\n    if (isOpen) {\n      dispatch(closeLoadingModal());\n    }\n  }\n};\n\nexport default getStatus;\n","import { TThunk } from \"store/interfaces/TThunk\";\n\nimport getStatus from \"./getStatus\";\n\ntype TGetAllStatus = () => TThunk<void>;\n\nexport type TAPIName =\n  | \"accounts\"\n  | \"assets\"\n  | \"customers\"\n  | \"datapoints\"\n  | \"devices\"\n  | \"documents\"\n  | \"forms\"\n  | \"invites\"\n  | \"media\"\n  | \"messages\"\n  | \"namespaces\"\n  | \"orders\"\n  | \"patients\"\n  | \"relationships\"\n  | \"rules\"\n  | \"templates\"\n  | \"users\"\n  | \"workflows\";\n\nconst APINames: TAPIName[] = [\n  \"accounts\",\n  \"assets\",\n  \"customers\",\n  \"datapoints\",\n  \"devices\",\n  \"documents\",\n  \"forms\",\n  \"invites\",\n  \"media\",\n  \"messages\",\n  \"namespaces\",\n  \"orders\",\n  \"patients\",\n  \"relationships\",\n  \"rules\",\n  \"templates\",\n  \"users\",\n  \"workflows\",\n];\n\nconst getAllStatus: TGetAllStatus = () => (dispatch) => {\n  APINames.forEach((APIName) => {\n    dispatch(getStatus(APIName));\n  });\n};\n\nexport default getAllStatus;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\n\nimport type { TAppState, TAppDispatch } from \"store/store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = (): TAppDispatch => useDispatch<TAppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<TAppState> = useSelector;\n","import styled from \"styled-components\";\n\nexport const HealthStatusStyled = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  height: 100vh;\n\n  .ant-card {\n    height: 80vh;\n    width: 70vw;\n    overflow-y: scroll;\n  }\n\n  .ant-card-body {\n    padding: 0;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const TableWrapperStyled = styled.div`\n  div.ant-table-wrapper\n    div.ant-spin-nested-loading\n    div.ant-spin-container\n    div.ant-table\n    div.ant-table-container\n    div.ant-table-content\n    table\n    tbody.ant-table-tbody\n    tr.ant-table-row.ant-table-row-level-0.error {\n    background-color: #e9967a59;\n  }\n`;\n","import React, { FC, useEffect, useState } from \"react\";\n\nimport { Card, Table } from \"antd\";\nimport { useDispatch } from \"react-redux\";\n\nimport getAllStatus from \"store/reducers/HealthStatus/Actions/getAllStatus\";\nimport { TAppState } from \"store/store\";\nimport { useAppSelector } from \"store/Utils/storeHooks\";\nimport {\n  IStatus,\n  THealthStatusValue,\n} from \"store/reducers/HealthStatus/healthStatus.slice\";\n\nimport { HealthStatusStyled } from \"./HealthStatus.Styles\";\nimport { useHealthStatusColumn } from \"./Hooks/useHealthStatusColumn.hook\";\nimport { useInterval } from \"./Hooks/useInterval.hook\";\nimport { TableWrapperStyled } from \"./TableWrapper.Styles\";\nimport { INTERVAL_SECONDS } from \"../../config/INTERVAL_SECONDS\";\n\nconst HealthStatus: FC = () => {\n  const dispatch = useDispatch();\n\n  const healthStatus = useAppSelector((state: TAppState) => state.healthStatus);\n\n  const columns = useHealthStatusColumn();\n\n  const [healthStatusValues, setHealthStatusValues] = useState<\n    THealthStatusValue[]\n  >([]);\n\n  useEffect(() => {\n    const newValues = Object.values(healthStatus);\n\n    setHealthStatusValues(newValues);\n  }, [healthStatus]);\n\n  useInterval(() => {\n    dispatch(getAllStatus());\n  }, Number(INTERVAL_SECONDS));\n\n  useEffect(() => {\n    dispatch(getAllStatus());\n  }, [dispatch]);\n\n  return (\n    <HealthStatusStyled>\n      <Card title=\"API Services Status\" bordered={false}>\n        <TableWrapperStyled>\n          <Table\n            aria-labelledby=\"app-section-label\"\n            aria-label=\"enhanced table\"\n            columns={columns}\n            dataSource={healthStatusValues}\n            pagination={false}\n            showSorterTooltip={false}\n            onRow={(status: IStatus) => ({\n              className: status.success ? \"success\" : \"error\",\n            })}\n          />\n        </TableWrapperStyled>\n      </Card>\n    </HealthStatusStyled>\n  );\n};\n\nexport default HealthStatus;\n","import { useEffect, useState } from \"react\";\n\nimport { ColumnsType } from \"antd/lib/table\";\n\nimport {\n  IStatus,\n  THealthStatusValue,\n} from \"store/reducers/HealthStatus/healthStatus.slice\";\n\ntype TUseHealthStatusColumn = () => ColumnsType<IStatus>;\n\nexport const useHealthStatusColumn: TUseHealthStatusColumn = () => {\n  const [columns, setColumns] = useState<ColumnsType<THealthStatusValue>>([]);\n\n  useEffect(() => {\n    const newColumns: ColumnsType<THealthStatusValue> = [\n      {\n        key: \"success\",\n        dataIndex: \"success\",\n        align: \"center\",\n        title: \"Success\",\n        render: (value: boolean) => (value ? \"✅\" : \"❌\"),\n      },\n      {\n        key: \"message\",\n        dataIndex: \"message\",\n        align: \"center\",\n        title: \"Message\",\n      },\n      {\n        key: \"hostname\",\n        dataIndex: \"hostname\",\n        align: \"center\",\n        title: \"HostName\",\n      },\n      {\n        key: \"time\",\n        dataIndex: \"time\",\n        align: \"center\",\n        title: \"Time\",\n        render: (value: string) =>\n          value\n            ? new Date(value).toLocaleString()\n            : new Date().toLocaleString(),\n      },\n      {\n        key: \"version0\",\n        dataIndex: \"version\",\n        align: \"center\",\n        title: \"version\",\n      },\n    ];\n\n    setColumns(newColumns);\n  }, []);\n\n  return columns;\n};\n","import { useEffect, useRef } from \"react\";\n\n// Based on  https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\ntype TUseInterval = (callback: () => void, delay: number) => void;\n\nexport const useInterval: TUseInterval = (callback, delay) => {\n  const savedCallback = useRef<() => void>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    const tick = () => {\n      if (savedCallback.current) {\n        savedCallback.current();\n      }\n    };\n\n    const id = setInterval(tick, delay * 1000);\n\n    return () => clearInterval(id);\n  }, [delay]);\n};\n","export const INTERVAL_SECONDS = 15;\n","import React, { FC } from \"react\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport RoutesLiterals from \"components/AppRouter/RoutesLiterals\";\nimport HealthStatus from \"views/HealthStatus/HealthStatus\";\n\nexport const AppRouter: FC = () => (\n  <Router>\n    <Switch>\n      <Route exact path={RoutesLiterals.healthStatus.route}>\n        <HealthStatus />\n      </Route>\n\n      <Redirect to={RoutesLiterals.healthStatus.route} />\n    </Switch>\n  </Router>\n);\n","import React, { FC } from \"react\";\n\nimport { Alert as AlertAntd, AlertProps } from \"antd\";\n\nexport const Alert: FC<AlertProps> = (props) => (\n  <AlertAntd showIcon closable {...props} />\n);\n","export const notificationStyle = {\n  padding: 0,\n  overflow: \"visible\",\n  width: \"auto\"\n};\n\nexport const messageListStyle = {\n  margin: 0,\n  paddingLeft: 20\n};\n","import React, { FC, useCallback, useEffect } from \"react\";\n\nimport { notification } from \"antd\";\n\nimport { useAppDispatch, useAppSelector } from \"store/Utils/storeHooks\";\nimport { reset as resetFeedbackStore } from \"store/reducers/Feedback/feedback.slice\";\n\nimport { Alert } from \"../Alert/Alert\";\n\nimport { notificationStyle, messageListStyle } from \"./Feedback.Styles\";\n\nexport const Feedback: FC = () => {\n  const { message, messageType } = useAppSelector((state) => state.feedback);\n  const dispatch = useAppDispatch();\n\n  const handleClose = useCallback(() => dispatch(resetFeedbackStore()), [\n    dispatch,\n  ]);\n\n  useEffect(() => {\n    if (message && messageType) {\n      notification.open({\n        message: \"\",\n        description: (\n          <Alert\n            type={messageType}\n            message={\n              message instanceof Array ? (\n                <ul style={messageListStyle}>\n                  {message.map((error) => (\n                    <li>{error.toUpperCase()}</li>\n                  ))}\n                </ul>\n              ) : (\n                message.toUpperCase()\n              )\n            }\n            onClose={handleClose}\n          />\n        ),\n        placement: \"bottomRight\",\n        style: notificationStyle,\n        onClose: handleClose,\n        closeIcon: <div />,\n      });\n    }\n  }, [handleClose, message, messageType]);\n\n  return <div />;\n};\n","import React, { Component, ReactNode, ErrorInfo } from \"react\";\n\ninterface IProps {\n  children: ReactNode;\n}\n\ninterface IState {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n    // We want to know what happened\n    // eslint-disable-next-line no-console\n    console.log({ error, errorInfo });\n\n    this.setState({ hasError: true });\n  }\n\n  render(): ReactNode {\n    const { hasError } = this.state;\n    const { children } = this.props;\n\n    if (hasError) {\n      return (\n        <h2>\n          We could not process your request successfully. Please, refresh the\n          page and try again\n        </h2>\n      );\n    }\n\n    return children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { FC } from \"react\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"store/store\";\n\nimport LoadingModal from \"components/LoadingModal/LoadingModal\";\n\nimport { AppRouter } from \"components/AppRouter/AppRouter\";\nimport { Feedback } from \"./components/Feedback/Feedback\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\n\nimport \"antd/dist/antd.css\";\n\nconst App: FC = () => (\n  <ErrorBoundary>\n    <Provider store={store}>\n      <AppRouter />\n\n      <Feedback />\n\n      <LoadingModal />\n    </Provider>\n  </ErrorBoundary>\n);\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./styles/index.css\";\nimport \"normalize.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}